#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R             &kp T                                                        &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F             &kp G        &kp LS(LG(S))                    &kp MINUS      &kp H        &kp J  &lt 5 K    &kp L    &kp SQT
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V             &kp B        &kp ESCAPE                       &kp EQUAL      &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt 6 LANGUAGE_2  &lt 2 SPACE  &lt_to_layer_0 3 LANGUAGE_1      &kp BACKSPACE  &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp GRAVE                     &kp AMPS    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                                &trans             &kp F7  &kp F8  &kp F9  &kp F10
&kp SINGLE_QUOTE              &kp DOLLAR  &kp PERCENT   &kp CARET             &kp COLON              &trans      &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp F4  &kp F5  &kp F6  &kp F11
&mt LEFT_SHIFT DOUBLE_QUOTES  &kp EXCL    &kp AT        &kp HASH              &kp SEMI               &trans      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp F1  &kp F2  &kp F3  &kp F12
&trans                        &trans      &trans        &trans                &trans                 &trans      &trans            &trans                                     &kp F13
            >;
        };

        NUM {
            bindings = <
&kp MINUS                &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS                                            &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp TAB                  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS   &kp LC(LA(KP_NUMBER_0))      &kp AT_SIGN  &kp EXCLAMATION   &kp DOUBLE_QUOTES  &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ASTRK  &kp BACKSLASH                &kp SLASH    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp UNDERSCORE
&trans                   &trans        &trans        &trans        &trans     &trans                       &trans       &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans     &trans              &trans    &trans               &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LC(T)  &mkp MB1            &mkp MB3  &mkp MB2             &kp LC(W)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LC(N)  &kp LA(LEFT_ARROW)  &trans    &kp LA(RIGHT_ARROW)  &kp LC(LS(T))
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                        &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans     &trans     &kp LG(E)  &trans     &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans     &trans     &trans     &trans     &trans     &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
